//문제
public class RenderTest {
  @Test
  public void boxesAreConnectedWithALine() throws Exception {
    Box box1 = new Box(20, 20);
    Box box2 = new Box(20, 20);
    box1.connectTo(box2);

    Diagram diagram = new Diagram();
    diagram.add(box1, new Point(10, 10));
    diagram.add(box2, new Point(40, 20));

    BufferedImage image = render(diagram);

    assertThat(colorAt(image, 19, 12), is(WHITE));
    assertThat(colorAt(image, 19, 13), is(WHITE));
    assertThat(colorAt(image, 20, 13), is(BLACK));
    assertThat(colorAt(image, 21, 13), is(BLACK));
    assertThat(colorAt(image, 22, 14), is(BLACK));
    assertThat(colorAt(image, 23, 14), is(BLACK));
    assertThat(colorAt(image, 24, 15), is(BLACK));
    assertThat(colorAt(image, 25, 15), is(BLACK));
    assertThat(colorAt(image, 26, 15), is(BLACK));
    assertThat(colorAt(image, 27, 16), is(BLACK));
    assertThat(colorAt(image, 28, 16), is(BLACK));
    assertThat(colorAt(image, 29, 17), is(BLACK));
    assertThat(colorAt(image, 30, 17), is(BLACK));
    assertThat(colorAt(image, 31, 17), is(WHITE));
    assertThat(colorAt(image, 31, 18), is(WHITE));
  }
}

//개선
public class RenderTest {
  private Diagram diagram;

  @Test
  public void boxesAreConnectedWithALine() throws Exception {
    Box box1 = new Box(20, 20);
    Box box2 = new Box(20, 20);
    box1.connectTo(box2);

    diagram = new Diagram();
    diagram.add(box1, new Point(10, 10));
    diagram.add(box2, new Point(40, 20));

    assertThat(render(diagram), hasConnectingLineBetween(box1, box2));
  }

  private Matcher<BufferedImage> hasConnectingLineBetween(final Box box1, final Box box2) {
    return new BoxConnectorMatcher(diagram, box1, box2);
  }
}

public class BoxConnectorMatcher extends BaseMatcher<BufferedImage> {
  private final Diagram diagram;
  private final Box box1;
  private final Box box2;

  BoxConnectorMatcher(Diagram diagram, Box box1, Box box2) {
    this.diagram = diagram;
    this.box1 = box1;
    this.box2 = box2;
  }

  @Override
  public boolean matches(Object o) {
    BufferedImage image = (BufferedImage) o;
    Point start = findEdgePointFor(box1);
    Point end = findEdgePointFor(box2);

    return new PathAlgorithm(image).areConnected(start, end);
  }

  private Point findEdgePointFor(final Box box1) {
    Point a = diagram.positionOf(box1);
    int x = a.x + (box1.width() / 2);
    int y = a.y - (box1.height() / 2);
    return new Point(x, y);
  }

  @Override
  public void describeTo(Description d) {
    d.appendText("connecting line exists between " + box1 + " and " + box2);
  }
}
