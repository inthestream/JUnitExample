//문제
//Thread#sleep 호출문
@Test
public void concurrentAccessFromMultipleThreads() throws Exception {
  final Counter counter = new Counter();

  final int callsPerThread = 100;
  final Set<Long> values = new HashSet<Long>();
  Runnable runnable = new Runnable() {
    @Override
    public void run() {
      for(int i = 0; i < callsPerThread; i++) {
        values.add(counter.getAndIncrement());
      }
    }
  };

  int threads = 10;

  for(int i = 0; i < threads; i++) {
    new Thread(runnable).start();
  }

  Thread.sleep(500);

  int expectedNoOfValues = threads * callsPerThread;
  assertEquals(expectedNoOfValues, values.size());
}

//개선
//java concurrent package 기능을 이용
@Test
public void concurrentAccessFromMultipleThreads() throws Exception {
  final Counter counter = new Counter();

  final int numberOfThreads = 10;
  final CountDownLatch allThreadsComplete = new CountDownLatch(numberOfThreads);

  final int callsPerThread = 100;
  final Set<Long> values = new HashSet<Long>();

  Runnable runnable = new Runnable() {
    @Override
    public void run() {
      for(int i = 0; i < callsPerThread; i++) {
        values.add(counter.getAndIncrement());
      }

      allThreadsComplete.countDown();
    }
  };

  for(int i = 0; i < numberOfThreads; i++) {
    new Thread(runnable).start();
  }

  allThreadsComplete.await(10, TimeUnit.SECONDS);

  int expectedNoOfValues = numberOfThreads * callsPerThread;
  assertEquals(expectedNoOfValues, values.size());

}
