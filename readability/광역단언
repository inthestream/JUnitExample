//문제
public class LogFileTransformerTest {

  private String expectedOutput;
  private String logFile;

  @Before
  public void setUpBuildLogFile() {
    StringBuilder lines = new StringBuilder();
    appendTo(lines, "[2005-05-23 21:20:33] LAUNCHED");
    appendTo(lines, "[2005-05-23 21:20:33] session-id###SID");
    appendTo(lines, "[2005-05-23 21:20:33] user-id###UID");
    appendTo(lines, "[2005-05-23 21:20:33] presentation-id###PID");
    appendTo(lines, "[2005-05-23 21:20:35] screen1");
    appendTo(lines, "[2005-05-23 21:20:36] screen2");
    appendTo(lines, "[2005-05-23 21:21:36] screen3");
    appendTo(lines, "[2005-05-23 21:21:36] screen4");
    appendTo(lines, "[2005-05-23 21:22:00] screen5");
    appendTo(lines, "[2005-05-23 21:22:48] STOPPED");
    logFile = lines.toString();
  }

  @Before
  public void setUpBuildTransformedFile() {
    StringBuilder file = new StringBuilder();
    appendTo(file, "session-id###SID");
    appendTo(file, "presentation-id###PID");
    appendTo(file, "user-id###UID");
    appendTo(file, "started###2005-05-23 21:20:33");
    appendTo(file, "screen1###1");
    appendTo(file, "screen2###60");
    appendTo(file, "screen3###0");
    appendTo(file, "screen4###24");
    appendTo(file, "screent###48");
    appendTo(file, "finished###2005-05-23 21:22:48");
    expectedOutput = file.toString();
  }

  @Test
  public void transformationGeneratesRightStuffIntoTheRightFile() throws Exception {
    TempFile input = TempFile.withSuffix(".src.log").append(logFile);
    TempFile output = TempFile.withSuffix(".dest.log");
    new LogFileTransformer().transform(input.file(), output.file());

    assertTrue("Destination file was not created", output.exists());
    assertEquals(expectedOutput, output.content());//너무 넓은 범위를 테스트 하고 있음
  }
}


//개선
public class LogFileTransformerTest {

  private static final String ENd = "2005-05-23 21:21:37";
  private static final String START = "2005-05-23 21:20:33";
  private LogFile logFile;

  @Before
  public void prepareLogFile() {
    logFile = new LogFile(START, END);
  }

  @Test //공통 헤더가 제대로 자리잡고 있는지 검사한다
  public void overallFileStructureIsCorrect() throws Exception {
    StringBuilder expected = new StringBuilder();
    appendTo(expected, "session-id###SID");
    appendTo(expected, "presentation-id###PID");
    appendTo(expected, "user-id###UID");
    appendTo(expected, "started###2005-05-23 21:20:33");
    appendTo(expected, "finished###2005-05-23 21:21:37");
    assertEquals(expected.toString(), transform(logFile.toString()));
  }

  @Test //로그파일에서 화면 지속 시간 속성의 위치를 확인한다
  public void screenDurationsGoBetweenStartedAndFinished() throws Exception {
    logFile.addContent("[2005-05-23 21:20:35] screen1");
    String out = transform(logFile.toString());

    assertTrue(out.indexOf("started") < out.indexOf("screen1"));
    assertTrue(out.indexOf("screen1") < out.indexOf("finished"));
  }

  @Test //계산된 화면 지속 시간 값을 확인했다
  public void screenDurationsAreRenderedInSeconds() throws Exception {
    logFile.addContent("[2005-05-23 21:20:35] screen1");
    logFile.addContent("[2005-05-23 21:20:35] screen2");
    logFile.addContent("[2005-05-23 21:21:36] screen3");

    String output = transform(logFile.toString());

    assertTrue(output.contains("screen1###0"));
    assertTrue(output.contains("screen2###61"));
    assertTrue(output.contains("screen3###1"));
  }

  private String transform(String log) {...}
  private void appendTo(StringBuilder buffer, String string) {...}
  private class LogFile {...}
}
